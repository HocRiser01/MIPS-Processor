$date
	Thu May 12 23:33:14 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module main $end
$scope module IM $end
$var wire 10 ! add_im [11:2] $end
$var reg 32 " im_out [31:0] $end
$scope begin seq_blk_a $end
$var integer 32 # i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module main $end
$scope module DM $end
$var wire 10 $ add_dm [11:2] $end
$var wire 1 % clk $end
$var wire 32 & dm_in [31:0] $end
$var wire 1 ' out $end
$var wire 1 ( in $end
$var reg 32 ) dm_out [31:0] $end
$scope begin seq_blk_a $end
$var integer 32 * i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module main $end
$scope module ALU $end
$var wire 2 + op [1:0] $end
$var wire 32 , b [31:0] $end
$var wire 32 - a [31:0] $end
$var reg 32 . sum [31:0] $end
$upscope $end
$upscope $end
$scope module main $end
$scope module GPR $end
$var wire 1 % clk $end
$var wire 30 / pc_plus [31:2] $end
$var wire 5 0 read_reg1 [4:0] $end
$var wire 5 1 read_reg2 [4:0] $end
$var wire 5 2 write_reg [4:0] $end
$var wire 32 3 write_data [31:0] $end
$var wire 1 4 set_GPR $end
$var wire 1 5 op $end
$var wire 1 6 JAL $end
$var reg 32 7 read_data1 [31:0] $end
$var reg 32 8 read_data2 [31:0] $end
$scope begin seq_blk_a $end
$var integer 32 9 i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module main $end
$scope module controller $end
$var wire 6 : func [5:0] $end
$var wire 6 ; op [5:0] $end
$var reg 1 < J $end
$var reg 1 6 JAL $end
$var reg 1 = JR $end
$var reg 1 > addi $end
$var reg 1 ? addu $end
$var reg 1 @ alu_sel $end
$var reg 2 A aluop [1:0] $end
$var reg 1 B beq $end
$var reg 1 C dest $end
$var reg 1 D extop $end
$var reg 1 E ifbeq $end
$var reg 1 ( in $end
$var reg 1 F j $end
$var reg 1 G jal $end
$var reg 1 H jr $end
$var reg 1 I lui $end
$var reg 1 J lw $end
$var reg 1 K ori $end
$var reg 1 ' out $end
$var reg 1 4 set_GPR $end
$var reg 1 L sign $end
$var reg 1 M slt $end
$var reg 1 N subu $end
$var reg 1 O sw $end
$var reg 1 5 write_reg $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xD
xC
xB
bx A
x@
x?
x>
x=
x<
bx ;
bx :
b100000 9
bx 8
bx 7
x6
x5
x4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
b10000000000 *
bx )
x(
x'
bx &
0%
bx $
b10000000000 #
bx "
bx !
$end
#5000
b1 3
b1 )
b1 $
b100 .
b100 ,
b11 +
b11 A
1'
1@
15
04
1L
1D
0H
0G
0F
0M
0I
0B
0O
1J
0K
0N
0>
0?
b1 2
b0 &
b0 8
b0 -
b0 7
b100 :
b100011 ;
b1 1
b0 0
b10001100000000010000000000000100 "
b0 !
b11000000000001 /
1%
#10000
0%
#15000
b10 $
b1000 .
b1000 ,
1J
b10 2
b1000 :
b10 1
b10001100000000100000000000001000 "
b1 !
b11000000000010 /
1%
#20000
0%
#25000
b0 3
b0 )
b1000001000 $
b11 2
b1100000100001 ,
b1100000100010 .
1C
1?
0J
b1 &
b1 8
b1 -
b1 7
b100001 :
b0 ;
b1 0
b1000100001100000100001 "
b10 !
b11000000000011 /
1%
#30000
0%
#35000
b1000 $
b10000000100010 .
b10000000100001 ,
b100 2
b0 &
b0 8
b11 1
b10 0
b10000110010000000100001 "
b11 !
b11000000000100 /
1%
#40000
0%
#45000
b1000001000 $
b10100000100001 ,
b10100000100001 .
b101 2
b0 -
b0 7
b100 1
b11 0
b11001000010100000100001 "
b100 !
b11000000000101 /
1%
#50000
0%
#55000
b1000 $
b11000000100001 .
b11000000100001 ,
b110 2
b101 1
b100 0
b100001010011000000100001 "
b101 !
b11000000000110 /
1%
#60000
0%
#65000
b0 $
b0 ,
b0 .
14
b10 +
b10 A
1M
0?
b0 2
b0 :
b0 1
b0 0
b0 "
b110 !
b11000000000111 /
1%
#70000
0%
#75000
1%
#80000
0%
#85000
1%
#90000
0%
#95000
1%
#100000
0%
#105000
1%
#106000
